{"version":3,"sources":["components/Result.js","components/Results.js","components/Popup.js","components/Search.js","App.js","serviceWorker.js","index.js"],"names":["Result","result","openPopup","className","onClick","imdbID","src","Poster","Title","Results","results","map","key","Popup","selected","closePopup","Year","imdbRating","Plot","Search","handleInput","search","type","placeholder","onChange","onKeyPress","App","useState","s","state","setState","apiurl","e","target","value","prevState","Axios","then","data","id","console","log","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"yPAWeA,MATf,YAAwC,IAAtBC,EAAqB,EAArBA,OAAQC,EAAa,EAAbA,UACxB,OACE,yBAAKC,UAAU,SAASC,QAAS,kBAAMF,EAAUD,EAAOI,UACtD,yBAAKC,IAAKL,EAAOM,SACjB,4BAAKN,EAAOO,SCQHC,MAVf,YAA0C,IAAvBC,EAAsB,EAAtBA,QAASR,EAAa,EAAbA,UAC1B,OACE,6BAASC,UAAU,WAChBO,EAAQC,KAAI,SAACV,GAAD,OACX,kBAAC,EAAD,CAAQW,IAAKX,EAAOI,OAAQJ,OAAQA,EAAQC,UAAWA,SCchDW,MApBf,YAA0C,IAAzBC,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,WACzB,OACE,6BAASZ,UAAU,SACjB,yBAAKA,UAAU,WACb,4BACGW,EAASN,MADZ,IACmB,kCAAQM,EAASE,KAAjB,MAEnB,uBAAGb,UAAU,UAAb,WAA+BW,EAASG,YACxC,yBAAKd,UAAU,QACb,yBAAKG,IAAKQ,EAASP,SACnB,2BAAIO,EAASI,OAEf,4BAAQf,UAAU,QAAQC,QAASW,GAAnC,Y,MCEOI,MAdf,YAA0C,IAAxBC,EAAuB,EAAvBA,YAAaC,EAAU,EAAVA,OAC7B,OACE,6BAASlB,UAAU,kBACjB,2BACEmB,KAAK,OACLC,YAAY,uBACZpB,UAAU,YACVqB,SAAUJ,EACVK,WAAYJ,MCgELK,MAlEf,WAAgB,IAAD,EACaC,mBAAS,CACjCC,EAAG,GACHlB,QAAS,GACTI,SAAU,KAJC,mBACNe,EADM,KACCC,EADD,KAMPC,EAAS,0CAwCf,OACE,yBAAK5B,UAAU,OACb,gCACE,+CAEF,8BACE,kBAAC,EAAD,CAAQiB,YAhCM,SAACY,GACnB,IAAIJ,EAAII,EAAEC,OAAOC,MAEjBJ,GAAS,SAACK,GACR,OAAO,2BAAKA,GAAZ,IAAuBP,EAAGA,QA4BUP,OA5CzB,SAACW,GACA,UAAVA,EAAEpB,KACJwB,IAAML,EAAS,MAAQF,EAAMD,GAAGS,MAAK,YAAe,IAC9C3B,EAD6C,EAAX4B,KACnBnB,OAEnBW,GAAS,SAACK,GACR,OAAO,2BAAKA,GAAZ,IAAuBzB,QAASA,aAwClC,kBAAC,EAAD,CAASA,QAASmB,EAAMnB,QAASR,UA1BrB,SAACqC,GACjBH,IAAML,EAAS,MAAQQ,GAAIF,MAAK,YAAe,IACzCpC,EADwC,EAAXqC,KAGjCE,QAAQC,IAAIxC,GAEZ6B,GAAS,SAACK,GACR,OAAO,2BAAKA,GAAZ,IAAuBrB,SAAUb,aAqBD,oBAAxB4B,EAAMf,SAASN,OACrB,kBAAC,EAAD,CAAOM,SAAUe,EAAMf,SAAUC,WAjBtB,WACjBe,GAAS,SAACK,GACR,OAAO,2BAAKA,GAAZ,IAAuBrB,SAAU,cCtCnB4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjB,MAAK,SAAAkB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlB,QAAQkB,MAAMA,EAAMC,c","file":"static/js/main.79ef9fc8.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Result({ result, openPopup }) {\r\n  return (\r\n    <div className=\"result\" onClick={() => openPopup(result.imdbID)}>\r\n      <img src={result.Poster} />\r\n      <h3>{result.Title}</h3>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Result;\r\n","import React from \"react\";\r\n\r\nimport Result from \"./Result\";\r\n\r\nfunction Results({ results, openPopup }) {\r\n  return (\r\n    <section className=\"results\">\r\n      {results.map((result) => (\r\n        <Result key={result.imdbID} result={result} openPopup={openPopup} />\r\n      ))}\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default Results;\r\n","import React from \"react\";\r\n\r\nfunction Popup({ selected, closePopup }) {\r\n  return (\r\n    <section className=\"popup\">\r\n      <div className=\"content\">\r\n        <h2>\r\n          {selected.Title} <span>({selected.Year})</span>\r\n        </h2>\r\n        <p className=\"rating\">Rating: {selected.imdbRating}</p>\r\n        <div className=\"plot\">\r\n          <img src={selected.Poster} />\r\n          <p>{selected.Plot}</p>\r\n        </div>\r\n        <button className=\"close\" onClick={closePopup}>\r\n          Close\r\n        </button>\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default Popup;\r\n","import React from \"react\";\r\n\r\nfunction Search({ handleInput, search }) {\r\n  return (\r\n    <section className=\"searchbox-wrap\">\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"search for a movie..\"\r\n        className=\"searchbox\"\r\n        onChange={handleInput}\r\n        onKeyPress={search}\r\n      />\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default Search;\r\n","import React, { useState } from \"react\";\r\nimport Axios from \"axios\";\r\nimport Results from \"./components/Results\";\r\nimport Popup from \"./components/Popup\";\r\n\r\nimport \"./App.css\";\r\nimport Search from \"./components/Search\";\r\n\r\nfunction App() {\r\n  const [state, setState] = useState({\r\n    s: \"\",\r\n    results: [],\r\n    selected: {},\r\n  });\r\n  const apiurl = \"http://www.omdbapi.com/?apikey=dfe6d885\";\r\n\r\n  const search = (e) => {\r\n    if (e.key === \"Enter\") {\r\n      Axios(apiurl + \"&s=\" + state.s).then(({ data }) => {\r\n        let results = data.Search;\r\n\r\n        setState((prevState) => {\r\n          return { ...prevState, results: results };\r\n        });\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleInput = (e) => {\r\n    let s = e.target.value;\r\n\r\n    setState((prevState) => {\r\n      return { ...prevState, s: s };\r\n    });\r\n  };\r\n\r\n  const openPopup = (id) => {\r\n    Axios(apiurl + \"&i=\" + id).then(({ data }) => {\r\n      let result = data;\r\n\r\n      console.log(result);\r\n\r\n      setState((prevState) => {\r\n        return { ...prevState, selected: result };\r\n      });\r\n    });\r\n  };\r\n\r\n  const closePopup = () => {\r\n    setState((prevState) => {\r\n      return { ...prevState, selected: {} };\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header>\r\n        <h1>Movie Database</h1>\r\n      </header>\r\n      <main>\r\n        <Search handleInput={handleInput} search={search} />\r\n\r\n        <Results results={state.results} openPopup={openPopup} />\r\n\r\n        {typeof state.selected.Title != \"undefined\" ? (\r\n          <Popup selected={state.selected} closePopup={closePopup} />\r\n        ) : (\r\n          false\r\n        )}\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}